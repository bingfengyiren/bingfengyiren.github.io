<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CuiMing's Blog</title>
    <description>关于程序与设计、黑客与画家 | 黄玄，Web &amp; Mobile Lover，Software Engineer，UX Designer | 这里是 @Hux黄玄 的个人博客，与你一起发现更大的世界。</description>
    <link>http://0.0.0.0:4000/</link>
    <atom:link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 01 Aug 2020 20:19:16 +0800</pubDate>
    <lastBuildDate>Sat, 01 Aug 2020 20:19:16 +0800</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>「备忘」Ghelper</title>
        <description>&lt;h4 id=&quot;问题&quot;&gt;&lt;b&gt;&lt;font color=&quot;LightSeaGreen&quot;&gt;问题&lt;/font&gt;&lt;/b&gt;&lt;/h4&gt;

&lt;p&gt;如何使用谷歌搜索？&lt;/p&gt;

&lt;h4 id=&quot;工具&quot;&gt;&lt;b&gt;&lt;font color=&quot;LightSeaGreen&quot;&gt;工具&lt;/font&gt;&lt;/b&gt;&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;谷歌浏览器安装包&lt;/li&gt;
  &lt;li&gt;插件Ghelper,能够帮助你访问Google&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;步骤&quot;&gt;&lt;b&gt;&lt;font color=&quot;LightSeaGreen&quot;&gt;步骤&lt;/font&gt;&lt;/b&gt;&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;在网上下载谷歌浏览器的安装包，安装谷歌浏览器。&lt;/li&gt;
  &lt;li&gt;下载Ghelper插件并解压。插件下载地址：http://googlehelper.net/&lt;/li&gt;
  &lt;li&gt;打开谷歌浏览器。&lt;/li&gt;
  &lt;li&gt;在顶部的地址框内输入：chrome://extensions/&lt;/li&gt;
  &lt;li&gt;将右上角的开发者模式打开。&lt;/li&gt;
  &lt;li&gt;点击&lt;strong&gt;加载已解压的扩展程序&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;选择刚刚解压的文件夹里的 ghelper_source 目录，并确认。此时看到浏览器上边的插件栏已有一个红黄绿蓝四色圈圈。&lt;/li&gt;
  &lt;li&gt;点击该插件或点击进入插件点击&lt;strong&gt;扩展程序选项&lt;/strong&gt;进入注册/登录界面。&lt;/li&gt;
  &lt;li&gt;注册账号并登录。&lt;/li&gt;
  &lt;li&gt;在谷歌浏览器键入https://www.google.com/即可看到访问成功！&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;原文&quot;&gt;原文&lt;/h4&gt;

&lt;p&gt;https://www.ivdone.top/article/120.html&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Aug 2020 04:00:00 +0800</pubDate>
        <link>http://0.0.0.0:4000/2020/08/02/Ghelper/</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2020/08/02/Ghelper/</guid>
        
        <category>Ghelper</category>
        
        
      </item>
    
      <item>
        <title>「笔记」指标计算</title>
        <description>&lt;h4 id=&quot;1-mapmean-average-precision平均正确率&quot;&gt;&lt;b&gt;&lt;font color=&quot;LightSeaGreen&quot;&gt;1. MAP(Mean Average Precision),平均正确率&lt;/font&gt;&lt;/b&gt;&lt;/h4&gt;

&lt;h5 id=&quot;11-计算方式&quot;&gt;1.1 计算方式&lt;/h5&gt;

&lt;p&gt;MAP指标能从整体上反映模型的检索性能,单次搜索的正确率(AP)计算如下：
&lt;script type=&quot;math/tex&quot;&gt;AP=\frac{\sum_{k=1}^{n}P(k)\times rel(k)}{相关文档个数} \tag{1}&lt;/script&gt;
其中，$P(k)$为前k个结果的准确率,$rel(k)$表示第k个文档是否相关，相关则为1，不相关为0，所以多次搜索结果求平均即为MAP,
&lt;script type=&quot;math/tex&quot;&gt;MAP=\frac{\sum_{q=1}^{Q}AP_{i}}{Q} \tag{2}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;其中Q为查询的个数。&lt;/p&gt;

&lt;h5 id=&quot;12-使用示例&quot;&gt;1.2 使用示例&lt;/h5&gt;

&lt;p&gt;假设query1搜索返回了6个文档，每个文档的相关情况为1，1，0，1，0，1&lt;/p&gt;

&lt;p&gt;假设query2搜索返回4个文档，每个文档的相关情况为1，0，1，1，则MAP的计算方式为：&lt;/p&gt;

&lt;center&gt;

$$
AP_{1} = \frac{1\times1 + 1\times1+0.75\times1+0.67\times1}{4}=0.855\\
AP_{2} = \frac{1\times1+0.67\times1+0.75\times1}{3}=0.806\\
MAP= \frac{AP_{1}+AP_{2}}{2} = 0.83
$$

&lt;/center&gt;

&lt;h5 id=&quot;13-缺点&quot;&gt;1.3 缺点&lt;/h5&gt;

&lt;p&gt;MAP指标只区分了相关和不相关，而没有相关度的差异。&lt;/p&gt;

&lt;h4 id=&quot;2-cgcumulative-gain累积增益&quot;&gt;&lt;b&gt;&lt;font color=&quot;LightSeaGreen&quot;&gt;2. CG（Cumulative Gain），累积增益&lt;/font&gt;&lt;/b&gt;&lt;/h4&gt;

&lt;h5 id=&quot;21-计算方式&quot;&gt;2.1 计算方式&lt;/h5&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;CG@K = \sum_{i=1}^{k}rel_{i} \tag{3}&lt;/script&gt;

&lt;p&gt;其中$rel_i$表示第$i$个搜索结果的相关程度，相关程度可以根据自己业务情况定义,比如&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;相关程度&lt;/th&gt;
      &lt;th&gt;值&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Good&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Fair&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Simple&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bad&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;22-使用示例&quot;&gt;2.2 使用示例&lt;/h5&gt;

&lt;p&gt;假设query1搜索返回了6个文档，每个文档的相关情况为2，1，0，3，0，1&lt;/p&gt;

&lt;p&gt;假设query2搜索返回4个文档，每个文档的相关情况为3，0，1，2&lt;/p&gt;

&lt;center&gt;

$$
CG@6_{1} = 2+1+3+1 = 7\\
CG@6_{2} = 3+1+2 = 6\\
CG = \frac{CG@6_{1}+CG@6_{2}}{2} = 6.5
$$

&lt;/center&gt;

&lt;h5 id=&quot;23-不足&quot;&gt;2.3 不足&lt;/h5&gt;

&lt;p&gt;CG虽然增加了相关程度的权重，但是因为是权重累积，所以忽略了排序位置的影响，比如对于搜索排序结果(3, 1,0)、(0,1,3)对于CG指标而言结果都是一样的，这显然是不合理的。&lt;/p&gt;

&lt;h4 id=&quot;3-dcgdiscounted-cumulative-gain折扣累积增益&quot;&gt;&lt;b&gt;&lt;font color=&quot;LightSeaGreen&quot;&gt;3. DCG（Discounted Cumulative Gain），折扣累积增益&lt;/font&gt;&lt;/b&gt;&lt;/h4&gt;

&lt;h5 id=&quot;31-计算方式&quot;&gt;3.1 计算方式&lt;/h5&gt;

&lt;p&gt;DCG在CG的基础上增加了位置信息的计算，计算方式如下：
&lt;script type=&quot;math/tex&quot;&gt;DCG@K=\sum_{i=1}^{k}\frac{rel_i}{log_{2}(i+1)} \tag{4}&lt;/script&gt;&lt;/p&gt;

&lt;h5 id=&quot;32-使用示例&quot;&gt;3.2 使用示例&lt;/h5&gt;

&lt;p&gt;假设query1搜索返回了6个文档，每个文档的相关情况为2，1，0，3，0，1&lt;/p&gt;

&lt;p&gt;假设query2搜索返回4个文档，每个文档的相关情况为3，0，1，2&lt;/p&gt;

&lt;center&gt;

$$
DCG@6_{1}=\frac{2}{log_{2}{2}}+\frac{1}{log_{2}{3}}+\frac{3}{log_{2}{5}}+\frac{1}{log_{2}{7}}=4.28\\
DCG@6_{2}=\frac{3}{log_{2}{2}}+\frac{1}{log_{2}{4}}+\frac{2}{log_{2}{5}}=3.86\\
DCG@6 = \frac{DCG@6_{1}+DCG@6_{2}}{2} = 4.07
$$

&lt;/center&gt;

&lt;h5 id=&quot;33-不足&quot;&gt;3.3 不足&lt;/h5&gt;

&lt;p&gt;DCG虽然引入了位置损失，但是不同的搜索结果对应的文档个数，以及分值都不一致，所以DCG的取值范围是动态变化的，这就对于结果的好还是不好给出明确的判定。&lt;/p&gt;

&lt;h4 id=&quot;4-ndcgnormalized-dcg归一化折扣累积增益&quot;&gt;&lt;b&gt;&lt;font color=&quot;LightSeaGreen&quot;&gt;4. NDCG（Normalized DCG），归一化折扣累积增益&lt;/font&gt;&lt;/b&gt;&lt;/h4&gt;

&lt;h5 id=&quot;41-计算方式&quot;&gt;4.1 计算方式&lt;/h5&gt;

&lt;p&gt;既然要做归一化，那拿什么做归一化呢？这里就引入IDCG的概念，IDCG其实就是把排序结果按照相关度降序排列后重新计算的DCG。这样就可以把指标归一化到0-1的范围内，约接近1说明约接近理想排序效果。
&lt;script type=&quot;math/tex&quot;&gt;NDCG@K=\frac{DCG@K}{IDCG@K} \tag{5}&lt;/script&gt;&lt;/p&gt;

&lt;h5 id=&quot;42-使用示例&quot;&gt;4.2 使用示例&lt;/h5&gt;

&lt;p&gt;假设query1搜索返回了6个文档，每个文档的相关情况为2，1，0，3，0，1&lt;/p&gt;

&lt;p&gt;假设query2搜索返回4个文档，每个文档的相关情况为3，0，1，2&lt;/p&gt;

&lt;center&gt;

$$
IDCG@6_{1} =\frac{3}{log_{2}2}+\frac{2}{log_{2}3}+\frac{1}{log_{2}4}+\frac{1}{log_{2}5}=5.19\\
IDCG@6_{2} = \frac{3}{log_{2}2}+\frac{2}{log_{2}3}+\frac{1}{log_{2}4} = 4.76\\
NDCG@6_{1} = \frac{DCG@6_{1}}{IDCG@6_{1}} =\frac{4.28}{5.19}=0.82 \\
NDCG@6_{2} = \frac{DCG@6_{2}}{IDCG@6_{2}} =\frac{3.86}{4.76}=0.81\\
NDCG = \frac{NDCG@6_{1} +NDCG@6_{2}}{2}=0.815
$$

&lt;/center&gt;

</description>
        <pubDate>Sat, 22 Feb 2020 04:00:00 +0800</pubDate>
        <link>http://0.0.0.0:4000/2020/02/22/search-metrics/</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2020/02/22/search-metrics/</guid>
        
        <category>指标计算</category>
        
        <category>NLP</category>
        
        
      </item>
    
      <item>
        <title>「翻译」ERNIE 2.0</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;A Continual Pre-Training Framework for Language Understanding&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;摘要&quot;&gt;摘要&lt;/h4&gt;

&lt;p&gt;​		最近预训练模型在各种各样的语言理解任务上都获得了最好的结果。&lt;font color=&quot;#DC3540&quot;&gt;当前的预训练任务都是通过几个简单的任务来训练模型，从而捕获单词或句子的共现信息。但是除了共现信息外，训练语料中还包含了词法、句法以及语义等有价值的信息。为了从训练预料中提取词法、句法和语义信息，论文提出了一个名为ERNIE 2.0的改进预训练框架，该框架以递进的方式构建预训练任务，然后通过多任务学习的方式在这些任务上预训练模型。&lt;/font&gt;&amp;gt;在此框架的基础上，论文构建多个任务并训练ERINE2.0 模型，以捕获训练数据中的词法、句法和语义方面的信息。实验结果表明ERNIE 2.0 模型在16个任务上优于BERT和XLNET，包括GLUE英文任务以及一些类似的中文任务。&lt;a href=&quot;https://github.com/PaddlePaddle/ERNIE.&quot;&gt;项目源码和预训练模型地址&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;引言&quot;&gt;引言&lt;/h4&gt;

&lt;p&gt;预训练语言表示比如ELMO，OpenAI GPT，BERT，ERNIE 1.0以及XLNET已经被证明在各种各样的语言理解任务中都有很好的效果，比如情感分类，自然语言推理（Natural Language Inference，NLI）,命名实体识别等等。&lt;/p&gt;

&lt;p&gt;通常预训练模型都是基于单词和句子的共现来训练。但是在训练预料中的除了共现信息外，词法、句法和语义信息同样值得提取。诸如人名、地名、机构名等命名实体可能包含一些概念信息。&lt;/p&gt;

&lt;p&gt;ERNIE框架支持通过不断进行多任务学习来不断引入各种定制任务。 当执行一项或多项新任务时，连续多任务学习方法可以有效地同时训练新引入的任务和原始任务，而不会忘记先前学习的知识。 这样，我们的框架可以根据之前掌握的参数训练增量式分布的表示形式。 此外，在此框架中，所有任务共享相同的编码网络，从而使跨不同任务的词汇，句法和语义信息的编码成为可能。&lt;/p&gt;

&lt;p&gt;论文的贡献主要体现在以下几个方面：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;论文提出一种改进的预训练框架ERINE 2.0，该框架可以以增量的方式支持定制化训练任务和改进的多任务学习。&lt;/li&gt;
  &lt;li&gt;论文构建了三类的非监督语言处理任务用于验证该框架的有效性。实验结果表明ERNIE 2.0 模型在16个任务上优于BERT和XLNET。&lt;/li&gt;
  &lt;li&gt;ERNIE 2.0基于英文的预训练和fine-tuning&lt;a href=&quot;https://github.com/PaddlePaddle/ERNIE&quot;&gt;代码地址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;相关工作&quot;&gt;相关工作&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;语言表示的无监督学习&lt;/p&gt;

    &lt;p&gt;用大量的无标注数据，通过预训练语言模型的方式学习通用的语言表示是高效的。传统方法通常专注于上下文无关的词嵌入。Word2Vec（Mikolov等人，2013）和GloVe（Pennington，Socher和Manning，2014）等方法基于大型语料库中单词共现信息来学习固定的词嵌入。&lt;/p&gt;

    &lt;p&gt;最近，提出了一些上下文相关的语言表示方式，在各类的NLP任务中都取得了最好的结果。ELMo（Peters et al.2018）建议从语言模型中提取上下文相关的功能。OpenAI GPT（Radford等人，2018）通过调整Transformer（Vaswani等人，2017）增强了上下文相关的嵌入表示。BERT（Devlin等人，2018）采用了遮掩语言模型(Masked language model,MLM)，同时在预训练中添加了下一个句子预测任务。XLM (Lample and Conneau 2019)集成了依赖单语言数据的无监督学习方法和利用平行双语数据的监督学习方法，来学习跨语言的语言模型。MT-DNN(Liu et al. 2019)在预训练模型的基础上学习了一些GLUE中的监督学习任务取得了更好的结果，相比于其它预训练模型而言它在其它监督学习任务上也表现更为优异。&lt;font color=&quot;blue&quot;&gt;XLNET (Yang et al. 2019)使用Transformer-XL((Dai et al. 2019)并提出了一种通用自回归预训练方法来学习双向上下文。&lt;/font&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;持续学习(Continual Learning,CL)&lt;/p&gt;

    &lt;p&gt;持续学习旨在按顺序训练几个任务的模型，以便在学习新任务时模型仍然记得先前学习的任务。这些方法受到人类学习过程的启发，因为人类能够通过不断积累学习到的信息，从而有效的开发新技能。通过持续学习，由于先前训练中获得的知识，该模型应该能够在新任务上表现更好。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;ernie-20-框架&quot;&gt;ERNIE 2.0 框架&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/ernie/image-20200109143946566.png&quot; alt=&quot;image-20200109143946566&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如图1所示，ERNIE2.0框架是基于广泛使用的预训练和微调架构构建的。与其它以少量的预训练目标进行训练不同的是，ERNIE2.0可以不断的引入大量各种各样的预训练任务，以帮助模型有效的学习词汇，句法和语义信息。基于此，ERNIE2.0框架通过持续多任务学习不断更新预训练模型。微调的时候，首先使用预先训练的参数初始化ERNIE模型，然后再使用来自特定任务的数据进行微调。&lt;/p&gt;

&lt;center class=&quot;half&quot;&gt; 
	&lt;table border=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td&gt;
	&lt;img src=&quot;/img/ernie/image-20200109175453662.png&quot; alt=&quot;image-20200109175453662.png&quot; style=&quot;zoom:80%&quot; /&gt;&lt;/td&gt;&lt;td&gt; 
	&lt;img src=&quot;/img/ernie/image-20200109175513036.png&quot; alt=&quot;image-20200109175513036.png&quot; style=&quot;zoom:50%&quot; /&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/center&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;持续预训练&lt;/p&gt;

    &lt;p&gt;持续预训练的过程包含两个步骤：1）不断构建设计大数据和先验知识的无监督预训练任务 2）通过持续的多任务学习不断的更新ERNIE模型&lt;/p&gt;

    &lt;p&gt;&lt;b&gt;&lt;font color=&quot;LightSeaGreen&quot;&gt;预训练任务构建&lt;/font&gt;&lt;/b&gt;  我们每次可以构建不同类型的任务，包括单词感知任务、结构感知任务和语义感知任务。所有这些预训练任务都依赖于自监督或者弱监督信号，这些信号可以从海量数据中获取，而无需人工标注。诸如命名实体，短语，篇章关系之类的先验知识可用于从大规模数据中生成标签。&lt;/p&gt;

    &lt;p&gt;&lt;b&gt;&lt;font color=&quot;LightSeaGreen&quot;&gt;持续多任务学习&lt;/font&gt;&lt;/b&gt; ERNIE 2.0 框架旨在从不同任务中学习词法、句法与语法信息。因此，有两个主要挑战需要客服。1）如何以连续的方式训练任务而又不会忘记以前学到的知识 2）如何有效的预训练这些任务。我们提出了一种持续的多任务学习方法来解决这两个问题。每当有新任务出现时，持续多任务学习方法首先使用先前学习的参数来初始化模型，然后同时训练新引入的任务和原始任务。这将确保学习的参数对先前学习的知识进行记忆。我们通过为每个任务分配N个训练迭代来解决训练效率的问题。框架需要针对每个任务自动将这N次迭代分配给不同阶段的训练。通过这种方式，我们既可以保证模型的训练效率，又不会忘记先前训练学习到的知识。&lt;/p&gt;

    &lt;p&gt;​		图2说明了论文中的方法与多任务学习和持续学习的区别。尽管从头进行多任务学习可以同时学习多个任务，但是在训练之前必须好所有定制的预训练任务。因此这种方法所花费的时间和持续学习花费的时间一样多，甚至会更多。传统的持续学习方法在每个阶段仅通过一项任务训练模型，这样的缺点是它可能会遗忘先前学习到的知识。&lt;/p&gt;

    &lt;p&gt;​		如图4所示，我们在每个阶段持续进行的多任务学习的体系结构包含一系列共享文本编码层，以对上下文信息进行编码，这些层可以使用RNN或多层自注意力层堆叠的深度Transformer。编码层的参数可以被所有学习任务更新。论文框架中有两种损失函数一个是句子级别的损失函数，另一个是词级别的损失，这个和BERT的损失函数类似。每个预训练任务都有自己的随时函数，在预训练期间，可以将句子级别的损失函数与词级别的损失结合起来以不断更新模型。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;针对实际任务进行fine-tuning&lt;/p&gt;

    &lt;p&gt;通过对特定任务的监督数据进行微调，预训练模型能够更好的适应不同的语言理解任务，比如QA(question answering)，NLI(Natural Language Inference)和语义相似度。每个下游任务都有针对各自任务fine-tuning后的模型。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;ernie-20模型&quot;&gt;ERNIE 2.0模型&lt;/h4&gt;

&lt;p&gt;为了验证框架的有效性，论文构建的三种不同的无监督语言处理任务并开发了ERNIE 2.0预训练模型。本节主要介绍模型的实现。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/ernie/image-20200109194729209.png&quot; alt=&quot;image-20200109194729209&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;模型结构&lt;/p&gt;

    &lt;p&gt;&lt;b&gt;&lt;font color=&quot;LightSeaGreen&quot;&gt;Tranformer Encoder &lt;/font&gt;&lt;/b&gt; 该模型使用多层Transformer作为基本编码器，就像其它预训练模型一样，比如GPT，BERT，XLM。transformer可以通过自注意力机制捕获序列中每个词的上下文信息，并生成一系列上下文相关的嵌入向量。给定一个序列，添加特殊的标识符[CLS]到序列的第一个位置。此外，在多个输入分段任务时，用符号[SEP]作为输入段的分隔符。&lt;/p&gt;

    &lt;p&gt;&lt;b&gt;&lt;font color=&quot;LightSeaGreen&quot;&gt;Task Embedding&lt;/font&gt;&lt;/b&gt;  模型通过提供任务向量来表示不同任务的特点。我们用0到N的ID表示不同的任务。每一个任务id都被赋予了唯一一个任务向量。对应的词，片段，位置和任务向量被作为模型的输入。在fine-tuning阶段可以用任意的任务ID来初始化模型。模型结构如图3所示。&lt;/p&gt;

    &lt;p&gt;&lt;b&gt;&lt;font color=&quot;LightSeaGreen&quot;&gt;Pre-training Tasks&lt;/font&gt;&lt;/b&gt;  我们构建了三种不同的任务来获取训练语料不同方面的信息。单词感知任务来捕获词法信息，结构感知任务来不说句法信息，语义感知任务用来捕获语义信息。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;词感知预训练任务&lt;/p&gt;

    &lt;p&gt;&lt;b&gt;&lt;font color=&quot;LightSeaGreen&quot;&gt;Knowledge Tasks&lt;/font&gt;&lt;/b&gt;  ERNIE 1.0 提出了一种知识整合的策略来增强表示。它引入了短语屏蔽和命名实体屏蔽，并预测了整个被屏蔽的短语和命名实体，以帮助模型学习局部上下文和全局上下文中的依赖信息。 我们使用此任务来训练模型的初始版本。&lt;/p&gt;

    &lt;p&gt;&lt;b&gt;&lt;font color=&quot;LightSeaGreen&quot; style=&quot;font-family:SimHei&quot;&gt;大写预测任务&lt;/font&gt;&lt;/b&gt; 大写单词相比于句子中的其它词而言通常包含特定的语义信息。示例模型在诸如命名实体识别之类的任务中具有一些优势，而非示例模型则更适合其他一些任务。 为了结合两种模型的优点，我们添加了一项任务来预测单词是否大写。&lt;/p&gt;

    &lt;p&gt;&lt;b&gt;&lt;font color=&quot;LightSeaGreen&quot; style=&quot;font-family:SimHei&quot;&gt;词文档关系预测任务&lt;/font&gt;&lt;/b&gt;  该任务预测一个片段中的词是否出现在原始文档的其它片段中。从经验上讲，出现在文档许多片段中的单词通常是常用单词或与文档主题相关的相关的。因此通过识别在文档片段中频繁出现的词，该任务可以可以使模型能够在某种程度上捕获文档的关键词信息。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;结构感知预训练任务&lt;/p&gt;

    &lt;p&gt;&lt;b&gt;&lt;font color=&quot;LightSeaGreen&quot; style=&quot;font-family:SimHei&quot;&gt;句子重排序任务&lt;/font&gt;&lt;/b&gt;  该任务旨在学习句子之间的关系。在此任务的预训练过程中，将给定的段落随机分为1到m个片段，然后所有的所有的片段随机排列组合。预训练任务的目标就是把这些片段重新组织，这个问题可以建模为一个k分类问题其中 $k=\sum_{n=1}^{m} n !$，从经验来看句子重排序任务可以使预训练模型学习文档中句子之间的关系。&lt;/p&gt;

    &lt;p&gt;&lt;b&gt;&lt;font color=&quot;LightSeaGreen&quot; style=&quot;font-family:SimHei&quot;&gt;句子距离任务&lt;/font&gt;&lt;/b&gt;  我们还构建了一个预训练任务用文档级信息来学习句子距离。该任务被建模为3分类问题，0表示两个句子在同一个文档中并相邻，1表示两个句子在同一个文档中但不相邻，2表示两个句子来源于不同的文档。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;语义感知预训练任务&lt;/p&gt;

    &lt;p&gt;&lt;b&gt;&lt;font color=&quot;LightSeaGreen&quot;&gt;Discourse Relation Task&lt;/font&gt;&lt;/b&gt;  除了句子距离以外，还引入了一个学习两个句子之间语义和修饰关系的任务。我们使用Sileo等人构建的数据来训练针对英语任务的预训练模型。按照Sileo等人使用的方法，我们还自动构建了一个中文数据集进行预训练。&lt;/p&gt;

    &lt;p&gt;&lt;b&gt;&lt;font color=&quot;LightSeaGreen&quot;&gt;IR Relevance Task &lt;/font&gt;&lt;/b&gt;  我们构建了一个关于query与title关系的3分类任务来学习信息检索中的短文本相关性。我们将查询作为第一句话，标题作为第二句话，商业搜索引擎的搜索日志数据作为预训练数据。此任务中有3中标签，”0”表示query和title强相关，意味着用户在输入查询后点击标题；”1”表示不可靠，意味着用户输入查询时，这些标题会显示在搜索结果中，但不会被点击；”2”表示查询和标题在语义信息方面是完全无关和随机的。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;实验&quot;&gt;实验&lt;/h4&gt;

&lt;p&gt;论文对比分析了ERNIE 2.0与效果最好的预训练模型。对于英文任务，对比了ERNIE 2.0，BERT，XLNET在GLUE任务上的效果。对于中文任务，对比分析了ERNIE 2.0，BERT，ERNIE 1.0在多个中文数据集上的效果。此外，我们还将我们的方法与多任务学习和传统的持续学习进行比较。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/ernie/image-20200110102237582.png&quot; alt=&quot;image-20200110102237582&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;预训练和实现&lt;/p&gt;

    &lt;p&gt;&lt;b&gt;&lt;font color=&quot;LightSeaGreen&quot; style=&quot;font-family:SimHei&quot;&gt;预训练数据&lt;/font&gt;&lt;/b&gt;  和BERT类似，英文语料中的有些数据是从Wikipedia和BookCorpus爬取过来的。此外我们还从Reddit上收集了一些数据，并用Disovery数据作为篇章关系数据。对于中文语料，我们从搜索引擎收集了各种各样的数据，例如百科全书，新闻，对话，信息检索和篇章关系数据。关于训练数据的详细信息如表2所示，预训练数据和训练任务的关系如表1所示。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/ernie/image-20200110101211692.png&quot; alt=&quot;image-20200110101211692&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;b&gt;&lt;font color=&quot;LightSeaGreen&quot; style=&quot;font-family:SimHei&quot;&gt;预训模型参数&lt;/font&gt;&lt;/b&gt;  为了和BERT模型对比，我们使用和BERT相同的参数设置。base版模型包含12层，12个自注意力头和隐藏层的维度是768维；large版模型包含24层，16个自注意力头，隐藏层的的维度是1024维。XLNET模型的设置和BERT相同。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;center class=&quot;half&quot;&gt; 
	&lt;table border=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td&gt;
	&lt;img src=&quot;/img/ernie/image-20200110102809661.png&quot; alt=&quot;image-20200109175453662.png&quot; style=&quot;zoom:80%&quot; /&gt;&lt;/td&gt;&lt;td&gt; 
	&lt;img src=&quot;/img/ernie/image-20200110103143386.png&quot; alt=&quot;image-20200109175513036.png&quot; style=&quot;zoom:80%&quot; /&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/center&gt;

&lt;p&gt;ERNIE 2.0 base版模型在48块NVidia v100 GPU卡上训练，large版模型用了64块NVidia v100 GPU。模型在百度开发的端到端预训练平台PaddlePaddle上训练。优化器选择Adam, 其中$\beta_{1}=0.9,\beta_{2}=0.98$ ,英文模型的学习率为5e-5，中文模型学习率为1.28e-4，每个预训练任务的前4000步预热。通过float16运算，我们设法加快了训练速度并减少了模型的内存使用量。 对每个预训练任务进行训练，直到预训练任务的度量收敛为止。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;任务微调&lt;/p&gt;

    &lt;p&gt;&lt;b&gt;&lt;font color=&quot;LightSeaGreen&quot; style=&quot;font-family:SimHei&quot;&gt;英文任务&lt;/font&gt;&lt;/b&gt; 作为自然语言理解的多任务基准和分析平台，GLUE通常用于评估模型的性能。 我们还在GLUE上测试了ERNIE 2.0的性能。 具体而言，GLUE涵盖了各种NLP数据集，其详细信息如下：&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/ernie/image-20200110182418741.png&quot; alt=&quot;image-20200110182418741&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;b&gt;&lt;font color=&quot;LightSeaGreen&quot; style=&quot;font-family:SimHei&quot;&gt;中文任务&lt;/font&gt;&lt;/b&gt; 我们对9个中文NLP任务进行了广泛的实验，包括机器阅读理解，命名实体识别，自然语言推论，语义相似度，情感分析和QA。 具体来说，选择以下中文数据集来评估ERNIE 2.0在中文任务上的效果：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;机器阅读理解(MRC):CMRC(2018)&lt;/li&gt;
      &lt;li&gt;命名实体识别(NER):MSRA-NER(2006)&lt;/li&gt;
      &lt;li&gt;情感分析(SA):ChnSentiCorp&lt;/li&gt;
      &lt;li&gt;语义相似度(SS):LCQMC&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;问答(QA):NLPCC-DBQA&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/img/ernie/image-20200110183040339.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;结论&quot;&gt;结论&lt;/h4&gt;

&lt;p&gt;论文提出了一种名为ERNINE 2.0的持续预训练框架，在该框架下可以通过持续学习的方式逐步构建与学习预训练任务。在此框架下训练了涵盖语言不同方面的预训练模型。&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Jan 2020 04:00:00 +0800</pubDate>
        <link>http://0.0.0.0:4000/2020/01/10/ERNIE-2/</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2020/01/10/ERNIE-2/</guid>
        
        <category>预训练</category>
        
        <category>NLP</category>
        
        
      </item>
    
  </channel>
</rss>
